{"version":3,"file":"/packages/meteor-file.js","sources":["meteor-file/meteor-file.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+E;AACA,8B;AACA,0C;AACA,C;;AAEA,sC;AACA,0B;AACA,kB;AACA,sC;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,sC;AACA,kC;AACA,8C;AACA,sD;;AAEA,uC;AACA,oD;AACA,wD;AACA,E;;AAEA,6C;AACA,yB;AACA,mB;AACA,qB;AACA,qB;AACA,qB;AACA,0C;AACA,uB;AACA,mB;AACA,+B;AACA,uC;AACA,qC;AACA,wC;AACA,K;AACA,E;;AAEA,uC;AACA,6B;AACA,6B;AACA,gB;;AAEA,iB;AACA,yC;AACA,0B;AACA,yC;AACA,wB;AACA,yC;AACA,M;AACA,2B;AACA,E;;AAEA,wB;AACA,0B;;AAEA,yB;AACA,wB;AACA,I;;AAEA,4B;AACA,iC;AACA,I;;AAEA,sB;AACA,2B;AACA,sB;AACA,sB;AACA,sB;AACA,sB;AACA,wB;AACA,oB;AACA,gC;AACA,wC;AACA,oB;AACA,sC;AACA,yC;AACA,O;AACA,I;;AAEA,4B;AACA,Y;AACA,oB;AACA,sB;AACA,sB;AACA,sB;AACA,yC;AACA,wB;AACA,oB;AACA,gC;AACA,wC;AACA,sC;AACA,yC;AACA,M;AACA,G;AACA,E;;AAEA,sD;AACA,+E;;AAEA,+E;AACA,sB;AACA,kC;AACA,8C;AACA,gC;AACA,2B;;AAEA,8B;;AAEA,kC;AACA,sB;AACA,gE;;AAEA,4B;AACA,4B;AACA,4B;;AAEA,+B;AACA,6B;;AAEA,mC;AACA,gD;AACA,kD;AACA,0B;AACA,yC;AACA,Q;;AAEA,oC;AACA,sC;AACA,2C;AACA,Q;;AAEA,wC;AACA,oD;AACA,uC;AACA,O;;AAEA,kB;AACA,M;;AAEA,yB;AACA,uB;AACA,qB;AACA,mB;AACA,yB;AACA,6B;AACA,4B;AACA,8B;AACA,M;;AAEA,wD;AACA,sB;;AAEA,8C;AACA,yE;;AAEA,8B;AACA,gF;;AAEA,0D;AACA,2B;AACA,qB;AACA,O;;AAEA,8B;AACA,oB;AACA,4B;;AAEA,kC;AACA,6C;AACA,wD;AACA,sB;AACA,4B;AACA,wC;AACA,a;AACA,kB;AACA,2B;AACA,uB;AACA,oD;AACA,iB;AACA,4B;AACA,kB;AACA,gC;AACA,4B;AACA,kC;AACA,yC;AACA,8C;AACA,mB;AACA,wB;AACA,2D;AACA,sC;AACA,+B;AACA,mB;AACA,iB;AACA,gB;AACA,a;AACA,a;AACA,gB;AACA,4B;AACA,2C;AACA,S;AACA,Q;;AAEA,iB;AACA,kB;AACA,M;;AAEA,gC;AACA,qE;AACA,2E;;AAEA,c;AACA,qC;AACA,0C;AACA,wC;AACA,uC;AACA,uC;AACA,qC;AACA,qC;;AAEA,4B;AACA,0C;AACA,iB;AACA,gC;AACA,4C;AACA,+C;AACA,W;AACA,W;AACA,O;AACA,K;AACA,K;;AAEA,wB;AACA,8C;AACA,gE;AACA,M;;AAEA,wD;AACA,0E;AACA,K;AACA,K;AACA,C;AACA,+E;;AAEA,+E;AACA,sB;AACA,6B;AACA,iC;;AAEA,gC;AACA,mB;AACA,yB;AACA,6B;AACA,G;;AAEA,kC;AACA,uC;AACA,6D;AACA,yC;AACA,6C;AACA,2C;AACA,6D;AACA,uB;AACA,K;AACA,K;AACA,C;AACA,+E","sourcesContent":["/************************ Client and Server **********************************/\nfunction defaultZero (value) {\n  return _.isUndefined(value) ? 0 : value;\n}\n\nMeteorFile = function (doc, options) {\n  options = options || {};\n  doc = doc || {};\n  this._id = doc._id || Meteor.uuid();\n  this.name = doc.name;\n  this.type = doc.type;\n  this.size = doc.size;\n  this.data = doc.data;\n  this.start = defaultZero(doc.start);\n  this.end = defaultZero(doc.end);\n  this.bytesRead = defaultZero(doc.bytesRead);\n  this.bytesUploaded = defaultZero(doc.bytesUploaded);\n\n  this.collection = options.collection;\n  this.readProgress = defaultZero(doc.readProgress);\n  this.uploadProgress = defaultZero(doc.uploadProgress);\n};\n\nMeteorFile.fromJSONValue = function (value) {\n  return new MeteorFile({\n    _id: value._id,\n    name: value.name,\n    type: value.type,\n    size: value.size,\n    data: EJSON.fromJSONValue(value.data),\n    start: value.start,\n    end: value.end,\n    bytesRead: value.bytesRead,\n    bytesUploaded: value.bytesUploaded,\n    readProgress: value.readProgress,\n    uploadProgress: value.uploadProgress\n  });\n};\n\nMeteorFile.humanize = function (size) {\n  var gb = Math.pow(1024, 3);\n  var mb = Math.pow(1024, 2);\n  var kb = 1024;\n\n  if (size >= gb)\n    return Math.floor(size / gb) + ' GB';\n  else if (size >= 1024^2)\n    return Math.floor(size / mb) + ' MB';\n  else if (size >= 1024)\n    return Math.floor(size / kb) + ' KB';\n  else\n    return size + ' Bytes';\n};\n\nMeteorFile.prototype = {\n  constructor: MeteorFile,\n\n  typeName: function () {\n    return \"MeteorFile\";\n  },\n\n  equals: function (other) {\n    return other._id == this._id;\n  },\n\n  clone: function () {\n    return new MeteorFile({\n      name: this.name,\n      type: this.type,\n      size: this.size,\n      data: this.data,\n      start: this.start,\n      end: this.end,\n      bytesRead: this.bytesRead,\n      bytesUploaded: this.bytesUploaded,\n      _id: this._id,\n      readProgress: this.readProgress,\n      uploadProgress: this.uploadProgress\n    });\n  },\n\n  toJSONValue: function () {\n    return {\n      _id: this._id,\n      name: this.name,\n      type: this.type,\n      size: this.size,\n      data: EJSON.toJSONValue(this.data),\n      start: this.start,\n      end: this.end,\n      bytesRead: this.bytesRead,\n      bytesUploaded: this.bytesUploaded,\n      readProgress: this.readProgress,\n      uploadProgress: this.uploadProgress\n    };\n  }\n};\n\nEJSON.addType(\"MeteorFile\", MeteorFile.fromJSONValue);\n/*****************************************************************************/\n\n/************************ Client *********************************************/\nif (Meteor.isClient) {\n  _.extend(MeteorFile.prototype, {\n    read: function (file, options, callback) {\n      if (arguments.length == 2)\n        callback = options;\n\n      options = options || {};\n\n      var reader = new FileReader;\n      var self = this;\n      var chunkSize = options.size || 1024 * 1024 * 2; /* 2MB */\n\n      self.size = file.size;\n      self.start = self.end;\n      self.end += chunkSize;\n\n      if (self.end > self.size)\n        self.end = self.size;\n\n      reader.onload = function () {\n        self.bytesRead += self.end - self.start;\n        self.data = new Uint8Array(reader.result);\n        self._setStatus();\n        callback && callback(null, self);\n      };\n\n      reader.onerror = function () {\n        self._setStatus(reader.error);\n        callback && callback(reader.error);\n      };\n\n      if ((this.end - this.start) > 0) {\n        var blob = file.slice(self.start, self.end);\n        reader.readAsArrayBuffer(blob);\n      }\n\n      return this;\n    },\n\n    rewind: function () {\n      this.data = null;\n      this.start = 0;\n      this.end = 0;\n      this.bytesRead = 0;\n      this.bytesUploaded = 0;\n      this.readProgress = 0;\n      this.uploadProgress = 0;\n    },\n\n    upload: function (file, method, options, callback) {\n      var self = this;\n\n      if (!Blob.prototype.isPrototypeOf(file))\n        throw new Meteor.Error(\"First parameter must inherit from Blob\");\n\n      if (!_.isString(method))\n        throw new Meteor.Error(\"Second parameter must be a Meteor.method name\");\n\n      if (arguments.length < 4 && _.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n\n      options = options || {};\n      self.rewind();\n      self.size = file.size;\n\n      var readNext = function () {\n        if (self.bytesUploaded < self.size) {\n          self.read(file, options, function (err, res) {\n            if (err) {\n              self.rewind();\n              callback && callback(err);\n            }\n            else {\n              Meteor.apply(\n                method,\n                [self].concat(options.params || []),\n                {\n                  wait: true\n                },\n                function (err) {\n                  if (err) {\n                    self.rewind();\n                    self._setStatus(err);\n                    callback && callback(err);\n                  }\n                  else {\n                    self.bytesUploaded += self.data.length;\n                    self._setStatus();\n                    readNext();\n                  }\n                }\n              );\n            }\n          });\n        } else {\n          self._setStatus();\n          callback && callback(null, self);\n        }\n      };\n\n      readNext();\n      return this;\n    },\n\n    _setStatus: function (err) {\n      this.readProgress = Math.round(this.bytesRead/this.size * 100);\n      this.uploadProgress = Math.round(this.bytesUploaded/this.size * 100);\n\n      if (err)\n        this.status = err.toString();\n      else if (this.uploadProgress == 100)\n        this.status = \"Upload complete\";\n      else if (this.uploadProgress > 0)\n        this.status = \"File uploading\";\n      else if (this.readProgress > 0)\n        this.status = \"File loading\";\n\n      if (this.collection) {\n        this.collection.update(this._id, {\n          $set: {\n            status: this.status,\n            readProgress: this.readProgress,\n            uploadProgress: this.uploadProgress\n          }\n        });\n      }\n    }\n  });\n\n  _.extend(MeteorFile, {\n    read: function (file, options, callback) {\n      return new MeteorFile(file).read(file, options, callback);\n    },\n\n    upload: function (file, method, options, callback) {\n      return new MeteorFile(file).upload(file, method, options, callback);\n    }\n  });\n}\n/*****************************************************************************/\n\n/************************ Server *********************************************/\nif (Meteor.isServer) {\n  var fs = Npm.require('fs');\n  var path = Npm.require('path');\n\n  function sanitize (fileName) {\n    return fileName\n      .replace(/\\//g, '')\n      .replace(/\\.\\.+/g, '.')\n  }\n\n  _.extend(MeteorFile.prototype, {\n    save: function (dirPath, options) {\n      var filepath = path.join(dirPath, sanitize(this.name));\n      var buffer = new Buffer(this.data);\n      var mode = this.start == 0 ? 'w' : 'a';\n      var fd = fs.openSync(filepath, mode);\n      fs.writeSync(fd, buffer, 0, buffer.length, this.start);\n      fs.closeSync(fd);\n    }\n  });\n}\n/*****************************************************************************/\n"]}